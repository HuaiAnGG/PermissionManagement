<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="wiki.laona.mapper.EmployeeMapper">
	<resultMap id="BaseResultMap" type="Employee">
		<id column="id" jdbcType="BIGINT" property="id"/>
		<result column="username" jdbcType="VARCHAR" property="username"/>
		<result column="password" jdbcType="VARCHAR" property="password"/>
		<result column="inputtime" jdbcType="TIMESTAMP" property="inputtime"/>
		<result column="tel" jdbcType="VARCHAR" property="tel"/>
		<result column="email" jdbcType="VARCHAR" property="email"/>
		<result column="state" jdbcType="BIT" property="state"/>
		<result column="admin" jdbcType="BIT" property="admin"/>
		<!--<result column="dep_id" jdbcType="BIGINT" property="depId"/>-->
		<!--
			columnPrefix="d_" 新的字段前缀
		-->
		<association property="department" javaType="Department" columnPrefix="d_">
			<id column="id" jdbcType="BIGINT" property="id"/>
			<result property="name" jdbcType="VARCHAR" column="name"/>
		</association>
	</resultMap>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete
		from employee
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<!--解除员工和角色关系外键-->
	<delete id="deleteEmployeeRoleRelByEid">
		delete
		from role_employee_rel
		where eid = #{eid}
	</delete>
	<insert id="insert" parameterType="Employee" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into employee (id, username, password, inputtime,
		                      tel, email, state, admin,
		                      dep_id)
		values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		        #{inputtime,jdbcType=TIMESTAMP},
		        #{tel,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{state,jdbcType=BIT}, #{admin,jdbcType=BIT},
		        #{department.id,jdbcType=BIGINT})
	</insert>
	<!--往员工角色关系表中插入对应关系-->
	<insert id="insertEmployeeAndRoleRel">
		insert into role_employee_rel(eid, rid)
		values (#{eid}, #{rid})
	</insert>
	<update id="updateByPrimaryKey" parameterType="Employee">
		update employee
		set username  = #{username,jdbcType=VARCHAR},
		    inputtime = #{inputtime,jdbcType=TIMESTAMP},
		    tel       = #{tel,jdbcType=VARCHAR},
		    email     = #{email,jdbcType=VARCHAR},
		    admin     = #{admin,jdbcType=BIT},
		    dep_id    = #{department.id,jdbcType=BIGINT}
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateStateByPrimaryKey">
		update employee
		set state = false
		where id = #{id}
	</update>
	<select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
		select id,
		       username,
		       password,
		       inputtime,
		       tel,
		       email,
		       state,
		       admin,
		       dep_id
		from employee
		where id = #{id,jdbcType=BIGINT}
	</select>
	<!--模糊查询(搜索关键字)-->
	<sql id="where_sql">
		<where>
			<if test="keyword!=null and keyword!=''">
				and e.username like concat('%', #{keyword}, '%')
				or e.email like concat('%', #{keyword}, '%')
				or e.tel like concat('%', #{keyword}, '%')
			</if>
		</where>
	</sql>
	<select id="selectAll" resultMap="BaseResultMap">
		select e.id,
		e.username,
		e.password,
		e.inputtime,
		e.tel,
		e.email,
		e.state,
		e.admin,
		d.id as d_id,
		d.name as d_name
		from employee as e
		left join department d on d.id = e.dep_id
		<include refid="where_sql"/>
		order by e.id
	</select>
</mapper>